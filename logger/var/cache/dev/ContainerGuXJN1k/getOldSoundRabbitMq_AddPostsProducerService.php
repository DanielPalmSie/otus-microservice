<?php

namespace ContainerGuXJN1k;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getOldSoundRabbitMq_AddPostsProducerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'old_sound_rabbit_mq.add_posts_producer' shared service.
     *
     * @return \OldSound\RabbitMqBundle\RabbitMq\Producer
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/BaseAmqp.php';
        include_once \dirname(__DIR__, 4).'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/ProducerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/Producer.php';

        $container->services['old_sound_rabbit_mq.add_posts_producer'] = $instance = new \OldSound\RabbitMqBundle\RabbitMq\Producer(($container->services['old_sound_rabbit_mq.connection.default'] ?? $container->load('getOldSoundRabbitMq_Connection_DefaultService')));

        $instance->setExchangeOptions(['name' => 'old_sound_rabbit_mq.add_posts', 'type' => 'direct', 'passive' => false, 'durable' => true, 'auto_delete' => false, 'internal' => false, 'nowait' => false, 'declare' => true, 'arguments' => NULL, 'ticket' => NULL]);
        $instance->setQueueOptions(['name' => '', 'declare' => false]);
        $instance->setDefaultRoutingKey('');
        $instance->setContentType('text/plain');
        $instance->setDeliveryMode(2);
        if ($container->has('event_dispatcher')) {
            $instance->setEventDispatcher(($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()));
        }

        return $instance;
    }
}
